animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train,model = T,weights=FALSE)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs(animal)
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train,model = T,model=FALSE)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs(animal)
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train,model = F)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs(animal)
log.animal= multinom(class_type~.,data=animal_train,model = T)
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train,)
predrf <- predict(log.animal,newdata=animal_test,type="class",weights=F)
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
log.animal= multinom(class_type~.,data=animal_train,model = T)
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train,weights=F)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
log.animal= multinom(class_type~.,data=animal_train,model = T)
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train,weights=T)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
log.animal= multinom(class_type~.,data=animal_train,model = T)
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
plot(Erreurs_premier_modele,main="Erreurs du premier modèle",ylab="Erreur",xlab="Itération")
mean(Erreurs_premier_modele)
#Modèle
log.animal1= multinom(class_type~feathers+milk+backbone+breathes,data=animal_train)
Erreurs_modele_initial=sapply(1:50 ,FUN=function(i){Erreurs(animal)})
plot(Erreurs_modele_initial,main="Erreurs du modèle initial",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_initial)
# pour choisir le modéle le plus pertinent au snes du critère d'AIC
stepAIC(log.animal, trace = TRUE, data = animal_train)
# Premier modèle
log.animal1= multinom(class_type~feathers+milk+backbone+breathes,data=animal_train)
predrf1 <- predict(log.animal1,newdata=animal_test,type="class")
te_rf1 <- tx_er(predrf1,animal_test$class_type)
te_rf1
#Deuxième modèle
log.animal2= multinom(class_type~hair+feathers+aquatic+breathes+venomous+tail,data=animal_train)
predrf2 <- predict(log.animal2,newdata=animal_test,type="class")
te_rf2 <- tx_er(predrf2,animal_test$class_type)
te_rf2
log.animal_final= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf_final <- predict(log.animal_final,newdata=animal_test,type="class")
te_rf_final <- tx_er(predrf_final,animal_test$class_type)
te_rf_final
log.animal_final= multinom(class_type~eggs+airborne+legs+toothed+catsize,data=animal_train)
predrf_final <- predict(log.animal_final,newdata=animal_test,type="class")
te_rf_final <- tx_er(predrf_final,animal_test$class_type)
te_rf_final
log.animal_final= multinom(class_type~milk+aquatic+legs+toothed+catsize,data=animal_train)
predrf_final <- predict(log.animal_final,newdata=animal_test,type="class")
te_rf_final <- tx_er(predrf_final,animal_test$class_type)
te_rf_final
log.animal_final= multinom(class_type~milk+aquatic+legs+toothed+backbone,data=animal_train)
predrf_final <- predict(log.animal_final,newdata=animal_test,type="class")
te_rf_final <- tx_er(predrf_final,animal_test$class_type)
te_rf_final
log.animal_final= multinom(class_type~milk+airborne+legs+toothed+catsize,data=animal_train)
predrf_final <- predict(log.animal_final,newdata=animal_test,type="class")
te_rf_final <- tx_er(predrf_final,animal_test$class_type)
te_rf_final
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~milk+airborne+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreur_finale=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~milk+airborne+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreur_modele_final(animal)})
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~milk+airborne+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreur_modele_final(animal)})
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+airborne+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~milk+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+airborne,data=animal_train)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+airborne,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
animal=animal[,-18]
res.mca <- MCA (animal, graph = FALSE)
# ACM (Étude de la liaison entre les variables)
library("FactoMineR")
res.mca <- MCA (animal, graph = FALSE)
eig.val <- get_eigenvalue(res.mca)
library("factoextra")
eig.val <- get_eigenvalue(res.mca)
animal <- read.csv("/home/samnouni/Bureau/M2 ISN/methode daprentissage/projet/animaux_I.csv",sep=",", header=TRUE)
## Variable en factor
for (i in 2:ncol(animal)){animal[,i]=as.factor(animal[,i])}
# Recodage de la variable class_type
levels(animal$class_type)=c( "mammifère","oiseau","reptile"," poisson","amphibien","insecte","invertébré ")
animal=animal[,-1]
# Modèle final
log.animal_final= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf_final <- predict(log.animal_final,newdata=animal_test,type="class")
te_rf_final <- tx_er(predrf_final,animal_test$class_type)
te_rf_final
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
# Graphique pour l'erreur en chaque itération
Erreurs_modele_initial=sapply(1:50 ,FUN=function(i){Erreurs(animal)})
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
# Graphique pour l'erreur en chaque itération
Erreurs_modele_initial=sapply(1:50 ,FUN=function(i){Erreurs(animal)})
plot(Erreurs_modele_initial,main="Erreurs du modèle initial",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_initial)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
# Modèle final
log.animal_final= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
# Modèle final
log.animal_final= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator+venomous,data=animal_train)
# pour choisir le modéle le plus pertinent au snes du critère d'AIC
stepAIC(log.animal_final, trace = TRUE, data = animal_train)
# Modèle final
log.animal_final= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator+venomous,data=animal_train)
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
# Modèle final
log.animal_final1= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator+venomous,data=animal_train)
# pour choisir le modéle le plus pertinent au snes du critère d'AIC
stepAIC(log.animal_final1, trace = TRUE, data = animal_train)
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
# Modèle final
log.animal_final1= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator+venomous,data=animal_train)
# pour choisir le modéle le plus pertinent au snes du critère d'AIC
stepAIC(log.animal_final1, trace = TRUE, data = animal_train)
# Modèle final
log.animal_final1= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
# pour choisir le modéle le plus pertinent au snes du critère d'AIC
stepAIC(log.animal_final1, trace = TRUE, data = animal_train)
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
# Modèle final
log.animal_final1= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
# pour choisir le modéle le plus pertinent au snes du critère d'AIC
stepAIC(log.animal_final1, trace = TRUE, data = animal_train)
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(Erreurs_modele_final,main="Erreurs du modèle final",ylab="Erreur",xlab="Itération")
mean(Erreurs_modele_final)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
# Modèle final
log.animal_final1= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
predrf <- predict(log.animal_fianl1,newdata=animal_test,type="class")
# Modèle final
log.animal_final1= multinom(class_type~eggs+aquatic+legs+toothed+catsize+predator,data=animal_train)
predrf <- predict(log.animal_fianl1,newdata=animal_test,type="class")
predrf <- predict(log.animal_final1,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
predrf_final1 <- predict(log.animal_final1,newdata=animal_test,type="class")
te_rf <- tx_er(predrf_final1,animal_test$class_type)
te_rf_final1 <- tx_er(predrf_final1,animal_test$class_type)
te_rf_final1
## Diviser en base apprentissage et base test
Erreurs=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~.,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
# Graphique pour l'erreur en chaque itération
Erreurs_modele_initial=sapply(1:50 ,FUN=function(i){Erreurs(animal)})
plot(100*Erreurs_modele_initial,main="Le taux d'erreurs du modèle initial",ylab="Erreur",xlab="Itération")
plot(100*Erreurs_modele_initial,main="Le taux d'erreurs du modèle initial",ylab="Taux d'erreur",xlab="Itération")
mean(Erreurs_modele_initial)
plot(100*Erreurs_modele_initial,main="Le taux d'erreurs du modèle initial",ylab="Taux d'erreur %",xlab="Itération")
mean(Erreurs_modele_initial)
#Fonction pour calculer l'erreur
Erreurs_modele_final=function(animal){
N <- nrow(animal)
ntrain <- floor(0.80*N) # partie entier
ntest <- N - ntrain
indices <- sample(1:N,ntrain,replace = FALSE)
animal_train <- animal[indices,]
animal_test <- animal[-indices,]
log.animal= multinom(class_type~eggs+aquatic+legs+toothed+catsize,data=animal_train)
predrf <- predict(log.animal,newdata=animal_test,type="class")
te_rf <- tx_er(predrf,animal_test$class_type)
return(te_rf)
}
Erreurs_modele_final=sapply(1:50 ,FUN=function(i){Erreurs_modele_final(animal)})
plot(100*Erreurs_modele_final,main="Le taux d'erreurs du modèle final",ylab="Taux d'erreur %",xlab="Itération")
mean(Erreurs_modele_final)
mean(Erreurs_modele_final)
library(jpeg)
data <- data.frame() # création d'un data frame qui va contenir les données
labels <- character() # création du vecteur qui va contenir les noms des groupes
# On récupère les noms des peintres
setwd("/home/samnouni/Bureau/M2 ISN/methode daprentissage/projet")
animaux <- list.files(path="animaux_II",full.names = F, recursive = F)
sample(1:10,3)
library(factoextra)
d1 <- circles(200)
library(factoextra)
source("/home/samnouni/Bureau/M2 ISN/methode daprentissage/dbscan/datasets2.R")
source("/home/samnouni/Bureau/M2 ISN/methode daprentissage/dbscan/color_outils.R")
d1 <- circles(200)
source("/home/samnouni/Bureau/M2 ISN/methode daprentissage/dbscan/datasets2.R")
d1 <- circles(200)
d2 <- difftaille(200)
d3 <- carres(200)
d4 <- losanges(200)
# CAH
dist_d1 <- dist(d1)
hclust_1 <- hclust(dist_d1,method="single")
plot(hclust_1)
# on garde 2 classes
clusters <- rect.hclust(hclust_1, k=2)
